//Task 5
#include <iostream>
#include <cmath>

struct PolarCoordinates {
    double r; // радиус
    double theta; // угол в радианах
};

struct CartesianCoordinates {
    double x; // координата по оси X
    double y; // координата по оси Y
};

PolarCoordinates convertToPolar(const CartesianCoordinates & cartesian) {
    PolarCoordinates polar;
    polar.r = sqrt(cartesian.x * cartesian.x + cartesian.y * cartesian.y); // вычисляем радиус
    polar.theta = atan2(cartesian.y, cartesian.x); // вычисляем угол
    return polar;
}

int main() {
    CartesianCoordinates cartesian;
    std::cout << "Введите координату X: ";
    std::cin >> cartesian.x;
    std::cout << "Введите координату Y: ";
    std::cin >> cartesian.y;

    PolarCoordinates polar = convertToPolar(cartesian);

    std::cout << "Полярные координаты: ";
    std::cout << "Радиус: " << polar.r << std::endl;
    std::cout << "Угол: " << polar.theta << " радиан" << std::endl;

    return 0;
}

//Task 6
#include <iostream>
#include <cmath>

struct PolarCoordinates {
    double r; // радиус
    double theta; // угол в радианах
};

struct CartesianCoordinates {
    double x; // координата по оси X
    double y; // координата по оси Y
};

CartesianCoordinates convertToCartesian(const PolarCoordinates& polar) {
    CartesianCoordinates cartesian;
    cartesian.x = polar.r * cos(polar.theta); // вычисляем координату X
    cartesian.y = polar.r * sin(polar.theta); // вычисляем координату Y
    return cartesian;
}

int main() {
    PolarCoordinates polar;
    std::cout << "Введите радиус: ";
    std::cin >> polar.r;
    std::cout << "Введите угол (в радианах): ";
    std::cin >> polar.theta;

    CartesianCoordinates cartesian = convertToCartesian(polar);

    std::cout << "Декартовы координаты: ";
    std::cout << "X: " << cartesian.x << std::endl;
    std::cout << "Y: " << cartesian.y << std::endl;

    return 0;
}

//Task 14
#include <iostream>

int main() {
    // Ввод продолжительности разговора
    int duration;
    std::cout << "Введите продолжительность  в минутах: ";
    std::cin >> duration;

    // Ввод дня недели
    int day;
    std::cout << "Введите день недели (число от 1 до 7, где 1 - понедельник): ";
    std::cin >> day;

    // Расчет стоимости без учета скидки
    double cost = duration * 0.5; // Предполагаем, что стоимость 1 минуты разговора 0.5 рубля

    // Проверка на выходные дни (субботу и воскресенье)
    if (day == 6 || day == 7) {
        // Расчет стоимости с учетом скидки 20%
        cost *= 0.8;
    }

    // Вывод стоимости переговоров
    std::cout << "Стоимость переговоров: " << cost << " рублей" << std::endl;

    return 0;
}

//Task 16
#include <iostream>

int main() {
    // Ввод шестизначного числа
    int number;
    std::cout << "Введите шестизначное число: ";
    std::cin >> number;

    // Проверка, является ли число шестизначным
    if (number >= 100000 && number <= 999999) {
        // Разделение числа на три пары цифр
        int firstPart = number / 1000; // Первые три цифры
        int secondPart = number % 1000; // Последние три цифры

        // Вычисление суммы цифр каждой пары
        int sumFirstPart = 0;
        while (firstPart > 0) {
            sumFirstPart += firstPart % 10; // Получаем последнюю цифру и добавляем ее к сумме
            firstPart /= 10; // Удаляем последнюю цифру
        }

        int sumSecondPart = 0;
        while (secondPart > 0) {
            sumSecondPart += secondPart % 10; // Получаем последнюю цифру и добавляем ее к сумме
            secondPart /= 10; // Удаляем последнюю цифру
        }

        // Проверка, является ли число "счастливым"
        if (sumFirstPart == sumSecondPart) {
            std::cout << "Число является 'счастливым'!" << std::endl;
        } else {
            std::cout << "Число не является 'счастливым'." << std::endl;
        }
    } else {
        std::cout << "Ошибка! Число не является шестизначным." << std::endl;
    }

    return 0;
}

//Task 18
#include <iostream>

bool isPalindrome(int number) {
    int reverseNumber = 0;
    int temp = number;
  
    // переворачиваем число
    while(temp > 0) {
        reverseNumber = reverseNumber * 10 + temp % 10;
        temp /= 10;
    }
    
    // проверяем, является ли число палиндромом
    if(reverseNumber == number)
        return true;
    else
        return false;
}

int main() {
    int number;
    
    std::cout << "Введите четырехзначное число: ";
    std::cin >> number;
    
    if(isPalindrome(number))
        std::cout << "Число является палиндромом." << std::endl;
    else
        std::cout << "Число не является палиндромом." << std::endl;
    
    return 0;
}

//Task 21
#include <iostream>

int main() {
    std::cout << "Размеры основных типов данных в байтах:" << std::endl;
    std::cout << "--------------------------------------" << std::endl;
    std::cout << "Тип int: " << sizeof(int) << " байт" << std::endl;
    std::cout << "Тип short: " << sizeof(short) << " байт" << std::endl;
    std::cout << "Тип long: " << sizeof(long) << " байт" << std::endl;
    std::cout << "Тип long long: " << sizeof(long long) << " байт" << std::endl;
    std::cout << "Тип float: " << sizeof(float) << " байт" << std::endl;
    std::cout << "Тип double: " << sizeof(double) << " байт" << std::endl;
    std::cout << "Тип char: " << sizeof(char) << " байт" << std::endl;
    std::cout << "Тип bool: " << sizeof(bool) << " байт" << std::endl;

    return 0;
}
//Размер типа char обычно составляет 1 байт и используется для представления одного символа. Размер типа bool также обычно составляет 1 байт и используется для представления логических значений true и false.
